/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyblogsBlogidImport } from './routes/myblogs/$blogid'
import { Route as BlogsBlogidImport } from './routes/blogs/$blogid'
import { Route as BlogsCategoryCatidImport } from './routes/blogs/category/$catid'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const NewblogLazyImport = createFileRoute('/newblog')()
const MyCategoriesLazyImport = createFileRoute('/my-categories')()
const MyBlogLazyImport = createFileRoute('/my-blog')()
const LoginLazyImport = createFileRoute('/login')()
const HomepageLazyImport = createFileRoute('/homepage')()
const ContactLazyImport = createFileRoute('/contact')()
const CategoriesLazyImport = createFileRoute('/categories')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const NewblogLazyRoute = NewblogLazyImport.update({
  id: '/newblog',
  path: '/newblog',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/newblog.lazy').then((d) => d.Route))

const MyCategoriesLazyRoute = MyCategoriesLazyImport.update({
  id: '/my-categories',
  path: '/my-categories',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/my-categories.lazy').then((d) => d.Route))

const MyBlogLazyRoute = MyBlogLazyImport.update({
  id: '/my-blog',
  path: '/my-blog',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/my-blog.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const HomepageLazyRoute = HomepageLazyImport.update({
  id: '/homepage',
  path: '/homepage',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/homepage.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const CategoriesLazyRoute = CategoriesLazyImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/categories.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const MyblogsBlogidRoute = MyblogsBlogidImport.update({
  id: '/myblogs/$blogid',
  path: '/myblogs/$blogid',
  getParentRoute: () => rootRoute,
} as any)

const BlogsBlogidRoute = BlogsBlogidImport.update({
  id: '/blogs/$blogid',
  path: '/blogs/$blogid',
  getParentRoute: () => rootRoute,
} as any)

const BlogsCategoryCatidRoute = BlogsCategoryCatidImport.update({
  id: '/blogs/category/$catid',
  path: '/blogs/category/$catid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/homepage': {
      id: '/homepage'
      path: '/homepage'
      fullPath: '/homepage'
      preLoaderRoute: typeof HomepageLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/my-blog': {
      id: '/my-blog'
      path: '/my-blog'
      fullPath: '/my-blog'
      preLoaderRoute: typeof MyBlogLazyImport
      parentRoute: typeof rootRoute
    }
    '/my-categories': {
      id: '/my-categories'
      path: '/my-categories'
      fullPath: '/my-categories'
      preLoaderRoute: typeof MyCategoriesLazyImport
      parentRoute: typeof rootRoute
    }
    '/newblog': {
      id: '/newblog'
      path: '/newblog'
      fullPath: '/newblog'
      preLoaderRoute: typeof NewblogLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/blogs/$blogid': {
      id: '/blogs/$blogid'
      path: '/blogs/$blogid'
      fullPath: '/blogs/$blogid'
      preLoaderRoute: typeof BlogsBlogidImport
      parentRoute: typeof rootRoute
    }
    '/myblogs/$blogid': {
      id: '/myblogs/$blogid'
      path: '/myblogs/$blogid'
      fullPath: '/myblogs/$blogid'
      preLoaderRoute: typeof MyblogsBlogidImport
      parentRoute: typeof rootRoute
    }
    '/blogs/category/$catid': {
      id: '/blogs/category/$catid'
      path: '/blogs/category/$catid'
      fullPath: '/blogs/category/$catid'
      preLoaderRoute: typeof BlogsCategoryCatidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/categories': typeof CategoriesLazyRoute
  '/contact': typeof ContactLazyRoute
  '/homepage': typeof HomepageLazyRoute
  '/login': typeof LoginLazyRoute
  '/my-blog': typeof MyBlogLazyRoute
  '/my-categories': typeof MyCategoriesLazyRoute
  '/newblog': typeof NewblogLazyRoute
  '/register': typeof RegisterLazyRoute
  '/blogs/$blogid': typeof BlogsBlogidRoute
  '/myblogs/$blogid': typeof MyblogsBlogidRoute
  '/blogs/category/$catid': typeof BlogsCategoryCatidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/categories': typeof CategoriesLazyRoute
  '/contact': typeof ContactLazyRoute
  '/homepage': typeof HomepageLazyRoute
  '/login': typeof LoginLazyRoute
  '/my-blog': typeof MyBlogLazyRoute
  '/my-categories': typeof MyCategoriesLazyRoute
  '/newblog': typeof NewblogLazyRoute
  '/register': typeof RegisterLazyRoute
  '/blogs/$blogid': typeof BlogsBlogidRoute
  '/myblogs/$blogid': typeof MyblogsBlogidRoute
  '/blogs/category/$catid': typeof BlogsCategoryCatidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/categories': typeof CategoriesLazyRoute
  '/contact': typeof ContactLazyRoute
  '/homepage': typeof HomepageLazyRoute
  '/login': typeof LoginLazyRoute
  '/my-blog': typeof MyBlogLazyRoute
  '/my-categories': typeof MyCategoriesLazyRoute
  '/newblog': typeof NewblogLazyRoute
  '/register': typeof RegisterLazyRoute
  '/blogs/$blogid': typeof BlogsBlogidRoute
  '/myblogs/$blogid': typeof MyblogsBlogidRoute
  '/blogs/category/$catid': typeof BlogsCategoryCatidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/categories'
    | '/contact'
    | '/homepage'
    | '/login'
    | '/my-blog'
    | '/my-categories'
    | '/newblog'
    | '/register'
    | '/blogs/$blogid'
    | '/myblogs/$blogid'
    | '/blogs/category/$catid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/categories'
    | '/contact'
    | '/homepage'
    | '/login'
    | '/my-blog'
    | '/my-categories'
    | '/newblog'
    | '/register'
    | '/blogs/$blogid'
    | '/myblogs/$blogid'
    | '/blogs/category/$catid'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/categories'
    | '/contact'
    | '/homepage'
    | '/login'
    | '/my-blog'
    | '/my-categories'
    | '/newblog'
    | '/register'
    | '/blogs/$blogid'
    | '/myblogs/$blogid'
    | '/blogs/category/$catid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CategoriesLazyRoute: typeof CategoriesLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  HomepageLazyRoute: typeof HomepageLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  MyBlogLazyRoute: typeof MyBlogLazyRoute
  MyCategoriesLazyRoute: typeof MyCategoriesLazyRoute
  NewblogLazyRoute: typeof NewblogLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  BlogsBlogidRoute: typeof BlogsBlogidRoute
  MyblogsBlogidRoute: typeof MyblogsBlogidRoute
  BlogsCategoryCatidRoute: typeof BlogsCategoryCatidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  CategoriesLazyRoute: CategoriesLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  HomepageLazyRoute: HomepageLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  MyBlogLazyRoute: MyBlogLazyRoute,
  MyCategoriesLazyRoute: MyCategoriesLazyRoute,
  NewblogLazyRoute: NewblogLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  BlogsBlogidRoute: BlogsBlogidRoute,
  MyblogsBlogidRoute: MyblogsBlogidRoute,
  BlogsCategoryCatidRoute: BlogsCategoryCatidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/categories",
        "/contact",
        "/homepage",
        "/login",
        "/my-blog",
        "/my-categories",
        "/newblog",
        "/register",
        "/blogs/$blogid",
        "/myblogs/$blogid",
        "/blogs/category/$catid"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/categories": {
      "filePath": "categories.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/homepage": {
      "filePath": "homepage.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/my-blog": {
      "filePath": "my-blog.lazy.tsx"
    },
    "/my-categories": {
      "filePath": "my-categories.lazy.tsx"
    },
    "/newblog": {
      "filePath": "newblog.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/blogs/$blogid": {
      "filePath": "blogs/$blogid.tsx"
    },
    "/myblogs/$blogid": {
      "filePath": "myblogs/$blogid.tsx"
    },
    "/blogs/category/$catid": {
      "filePath": "blogs/category/$catid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
